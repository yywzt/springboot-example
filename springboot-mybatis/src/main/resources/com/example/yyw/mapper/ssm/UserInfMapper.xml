<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.yyw.mapper.ssm.UserInfMapper">
  <resultMap id="BaseResultMap" type="com.example.yyw.model.ssm.UserInf">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="uname" jdbcType="VARCHAR" property="uname" />
    <result column="passwd" jdbcType="VARCHAR" property="passwd" />
    <result column="gentel" jdbcType="VARCHAR" property="gentel" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="city" jdbcType="VARCHAR" property="city" />
    <result column="creation_date" jdbcType="TIMESTAMP" property="creationDate" />
    <result column="created_by" jdbcType="CHAR" property="createdBy" />
    <result column="updation_date" jdbcType="TIMESTAMP" property="updationDate" />
    <result column="updated_by" jdbcType="CHAR" property="updatedBy" />
    <result column="enabled_flag" jdbcType="BIT" property="enabledFlag" />
  </resultMap>
  <resultMap id="ResultMap" type="com.example.yyw.model.ssm.UserInf" extends="BaseResultMap">
    <collection property="roles" ofType="com.example.yyw.model.ssm.Roles">
      <id column="role_id" property="id"/>
      <result column="role_name" property="roleName"/>
      <result column="role_code" property="roleCode"/>
    </collection>
  </resultMap>
  <sql id="Base_Column_List">
    id, uname, passwd, gentel, email, city ,creation_date ,created_by ,updation_date ,updated_by ,enabled_flag
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_inf
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user_inf
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.yyw.model.ssm.UserInf">
    insert into user_inf (id, uname, passwd, 
      gentel, email, city
      )
    values (#{id,jdbcType=INTEGER}, #{uname,jdbcType=VARCHAR}, #{passwd,jdbcType=VARCHAR}, 
      #{gentel,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{city,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.yyw.model.ssm.UserInf">
    insert into user_inf
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uname != null">
        uname,
      </if>
      <if test="passwd != null">
        passwd,
      </if>
      <if test="gentel != null">
        gentel,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="city != null">
        city,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uname != null">
        #{uname,jdbcType=VARCHAR},
      </if>
      <if test="passwd != null">
        #{passwd,jdbcType=VARCHAR},
      </if>
      <if test="gentel != null">
        #{gentel,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="city != null">
        #{city,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.yyw.model.ssm.UserInf">
    update user_inf
    <set>
      <if test="uname != null">
        uname = #{uname,jdbcType=VARCHAR},
      </if>
      <if test="passwd != null">
        passwd = #{passwd,jdbcType=VARCHAR},
      </if>
      <if test="gentel != null">
        gentel = #{gentel,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="city != null">
        city = #{city,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.yyw.model.ssm.UserInf">
    update user_inf
    set uname = #{uname,jdbcType=VARCHAR},
      passwd = #{passwd,jdbcType=VARCHAR},
      gentel = #{gentel,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      city = #{city,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findUserInfByUname" parameterType="Object" resultMap="ResultMap">
    SELECT
      u.*,r.id AS role_id,r.role_name,r.role_code
    FROM user_inf u
    LEFT JOIN user_roles ur ON u.id=ur.user_id
    LEFT JOIN roles r ON r.id=ur.role_id
    where uname = #{uname}
  </select>

  <select id="findAll" resultMap="BaseResultMap">
    SELECT <include refid="Base_Column_List" />
    FROM user_inf
  </select>
</mapper>